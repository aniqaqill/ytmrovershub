generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  role              String             @default("volunteer")
  contactNumber     String?
  accounts          Account[]
  forms             Form[]
  programs          Program[]          @relation("CoordinatorPrograms")
  sessions          Session[]
  volunteerPrograms VolunteerProgram[]
}

model Program {
  id            String             @id @default(cuid())
  name          String
  description   String
  startDate     DateTime
  startTime     String            
  endTime       String
  location      String
  maxVolunteer  Int
  coordinatorId String
  image         String           
  form          Form[]
  coordinator   User               @relation("CoordinatorPrograms", fields: [coordinatorId], references: [id])
  volunteers    VolunteerProgram[]
  materials     ProgramAidMaterial[]
}

model VolunteerProgram {
  userId    String
  programId String
  program   Program @relation(fields: [programId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@id([userId, programId])
}

model Form {
  id            String   @id @default(cuid())
  dateCompleted DateTime
  feedback      String
  imageURL      String[]
  approved      Boolean
  volunteerId   String
  programId     String
  program       Program  @relation(fields: [programId], references: [id])
  user          User     @relation(fields: [volunteerId], references: [id])
}

model AidMaterial {
  id          String  @id @default(cuid())
  name        String
  description String
  quantity    Int
  image       String
  programs    ProgramAidMaterial[]
}

model ProgramAidMaterial {
  id            String       @id @default(cuid())
  quantityUsed  Int
  programId     String
  aidMaterialId String
  program       Program      @relation(fields: [programId], references: [id])
  aidMaterial   AidMaterial  @relation(fields: [aidMaterialId], references: [id])
  
  @@unique([programId, aidMaterialId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  @@unique([identifier, token])
}
